import logging
import json
from sanic import Blueprint, response
from sanic.request import Request
from typing import Text, Optional, List, Dict, Any

from rasa.core.channels.channel import UserMessage, OutputChannel, InputChannel, CollectingOutputChannel

logger = logging.getLogger(__name__)

class AlexaConnector(InputChannel):
    """A custom http input channel for Alexa.
    You can find more information on custom connectors in the 
    Rasa docs: https://rasa.com/docs/rasa/user-guide/connectors/custom-connectors/
    """
    @classmethod
    def name(cls):
        return "alexa_assistant"
    
    # Sanic blueprint for handling input. The on_new_message
    # function pass the received message to Rasa Core
    # after you have parsed it
    def blueprint(self, on_new_message):
        
        alexa_webhook = Blueprint("alexa_webhook", __name__)

        # required route: use to check if connector is live
        @alexa_webhook.route("/", methods=["GET"])
        async def health(request):
            return response.json({"status": "ok"})
        
        @alexa_webhook.route("/webhook", methods=["POST"])
        async def receive(request):
            payload = request.json
            intenttype = payload["request"]["type"]

            if intenttype == "LaunchRequest":
                message = "Hello! Welcome to this Rasa-powered Alexa skill. You can start by saying 'hi'."
                session = "false"
            else:
                intent = payload["request"]["intent"]["name"]

                if intent == "AMAZON.StopIntent":
                    session = "true"
                    message = "Talk to you later"
                else:
                    text = payload["request"]["intent"]["slots"]["text"]["value"]

                    out = CollectingOutputChannel()

                    # send the user message to Rasa & 
                    # wait for the response
                    await on_new_message(UserMessage(text, out))
                    #extract the text from Rasa's response
                    responses = [m["text"] for m in out.messages]
                    message = responses[0]
                    session = "false"
            # Send the response generated by Rasa back to Alexa to
            # pass on to the user. For more information, refer to the
            # Alexa Skills Kit Request and Response JSON Reference:
            # https://developer.amazon.com/en-US/docs/alexa/custom-skills/request-and-response-json-reference.html
            r = {
                "version": "1.0",
                "sessionAttributes": {"status": "test"},
                "response": {
                    "outputSpeech": {
                        "type": "PlainText",
                        "text": message,
                        "playBehavior": "REPLACE_ENQUEUED",
                    },
                    "reprompt": {
                        "outputSpeech": {
                            "type": "PlainText",
                            "text": message,
                            "playBehavior": "REPLACE_ENQUEUED",
                        }
                    },
                    "shouldEndSession": session,
                },
            }

            return response.json(r)

        return alexa_webhook